top_level : function*
function : "fn" _ws identifier _ws "(" param_list? ")" ( _ws "->" _ws annotated_type )? _ws "{" statement* "}" ("\n" | " ")*
param_list : param ("," _ws param)*
param : identifier _ws ":" _ws annotated_type
annotated_type : primitive_i32 | primitive_f64 | primitive_bool | primitive_string_type | primitive_char | primitive_unit | array_type

primitive_i32 : "i32"
primitive_f64 : "f64"
primitive_bool : "bool"
primitive_string_type : "String"
primitive_char : "char"
primitive_unit : "()"
array_type: "[" annotated_type "]"

statement : let
          | loop
          | if_stmt
          | while_stmt
          | match_stmt
          | return_stmt
          | expr _ws ";" _ws

let : _ws "let" _ws identifier _ws (":" _ws annotated_type)? _ws "=" _ws expr _ws ";" _ws
loop : _ws "loop" _ws "{" _ws statement* _ws "}" _ws
if_stmt : _ws "if" _ws expr _ws "{" _ws statement* _ws "}" (_ws "else" _ws "{" _ws statement* _ws "}")? _ws
while_stmt : _ws "while" _ws expr _ws "{" _ws statement* _ws "}" _ws
match_stmt : _ws "match" _ws expr _ws "{" _ws match_arm* _ws "}" _ws
match_arm : expr _ws "=>" _ws statement _ws ","

return_stmt : _ws "return" _ws expr? _ws ";" _ws

// 四則演算の優先順位を明確化
expr : expr _ws "||" _ws and_expr   -> or_expr
     | and_expr

and_expr : and_expr _ws "&&" _ws equality_expr -> and_expr
         | equality_expr

equality_expr : equality_expr _ws ("==" | "!=") _ws relational_expr -> equality_expr
              | relational_expr

relational_expr : relational_expr _ws ("<" | ">" | "<=" | ">=") _ws add_sub_expr -> relational_expr
                | add_sub_expr

add_sub_expr : add_sub_expr _ws "+" _ws mul_div_expr -> add_expr
             | add_sub_expr _ws "-" _ws mul_div_expr -> sub_expr
             | mul_div_expr

mul_div_expr : mul_div_expr _ws "*" _ws unary_expr -> mul_expr
             | mul_div_expr _ws "/" _ws unary_expr -> div_expr
             | unary_expr

unary_expr : ("+" | "-" | "!") _ws unary_expr -> unary_expr
           | factor

factor : _ws number _ws
       | _ws float _ws
       | _ws function_call _ws
       | _ws string _ws
       | _ws identifier _ws
       | _ws boolean _ws
       | _ws "(" _ws expr _ws ")" _ws  // 括弧を含む式をサポート

function_call : identifier _ws "(" arg_list? ")"
arg_list : expr ("," _ws expr)*

boolean : "true" | "false"
number : /[0-9]+/
float : /[0-9]+\.[0-9]+/
identifier : /[A-Za-z_][A-Za-z0-9_]*/
string : /"[^"]*"/
_ws : (" " | "\n" | "\r" | "\t")*

// コメントの定義
COMMENT : "//" /[^\n]*/  // 行コメント
MULTILINE_COMMENT : "/*" /(.|\n)*?/ "*/"  // 複数行コメント

// コメントを無視する
%ignore COMMENT
%ignore MULTILINE_COMMENT